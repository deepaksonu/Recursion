
	  0 1 2 3  4  5  6  7
arr = 1 2 3 44 56 67 86 98
target = 86

static int binarySearch(int[] arr,int target,int s,int e){
	if(s > e){
		return -1;
	}

	int mid = s + (e-s)/2;
	if(target < arr[mid]){
		return binarySearch(arr,target,s,mid-1);
	}else if(target > arr[mid]){
		return binarySearch(arr,target,mid+1,e);
	}else
		return mid;

}

target = 86
-> arr,86,0,7 ; m = 4
-> arr,86,5,7 ; m = 6
return 6

target =2
-> arr,2,0,7 ; m = 4
-> arr,2,0,3 ; m = 2
-> arr,2,0,1 ; m = 1
return 1

target = 98
-> arr,98,0,7 ; m = 4
-> arr,98,5,7 ; m = 6
return 6

target = 102
-> arr,102,0,7 ; m = 4
-> arr,102,5,7 ; m = 6
-> arr,102,7,7 ; m = 7
-> arr,102,8,7 ; 
return -1

target =1 
-> arr,1,0,7 ; m = 4
-> arr,1,0,3 ; m = 2
-> arr,1,0,1 ; m = 1
-> arr,1,0,0 ; 
return 0

NTo1
static void print(int n){
	if(n < 0)
		return;
		
	System.out.println(n);
	print(n-1);
}
N=5,4,3,2,1,0
5 4 3 2 1 0

1ToN
static void print(int n){
	if(n < 0 ) return;
	
	print(n-1)
	System.out.println(n);
}
N =5,4,3,2,1,0
0 1 2 3 4 5

Sum n to 1
static int sum(int n){
	if n < 1 return n;
	
	return n + sum(n-1);
}
n=3 
sum(3) = 3+sum(2) = 3 + 3
sum(2) = 2+sum(1) = 2 + 1
sum(1) = 1+sum(0) = 1 + 0
sum(0) = 0

Sum 1 to n
static int sum(int n,int index){
	if (index > n) return 0;
	
	return index + sum(n,index+1);
}

sum(3,0) = 0 + sum(3,1) = 0+1+2+3+0
sum(3,1) = 1 + sum(3,2) = 1+2+3+0
sum(3,2) = 2 + sum(3,3) = 2+3+0
sum(3,3) = 3 + sum(3,4) = 3+0
sum(3,4) = 0

SumOfDigits
static int sumOfDigits(int n){
	if(n<0)return 0;
	
	return sumOfDigits(n/10) + n%10;
}

123 = 12 + 3 = 1+2+3
12

reverse number
static int reverseNum(int n,int revN){
	if(n ==0) return re;
	
	return reverseNum(n/10, revN*10 + n%10);
}
 123 ,0 -> (12 , 0+3) -> (1, 3*10 + 2) -> (0 ,320 + 1)

static int reverseNum(int n){
	if(n ==0) return n;
	
	int digits= (int)Math.log10(n);
	
}
static int helper(int n, int digits){
	if(n ==0) return n;
	return n%10 * 10^ digits + helper(n/10, digits-1);
}
1234

h(1234,3) = 4000+ h(123,2)
h(123,2)  = 300 + h(12,1)
h(12,1) = 20 + h(1,0)
h(1,0) = 1 + h(,)

static int countZeros(int n){
	
	return helper(n,Math.log10(n),0);
}
static int helper(n,count){
	if(n%10 == n) return n;
	
	if(n%10 == 0) count++;
	return helper(n/10,count)
}

1020040

countSteps
static int numberOfSteps(int n,count){
	if(n ==0 ) return count;
	if(n%2 == 0){
		retun numberOfSteps(n/10,count++);
	}else{
		numberOfSteps(n-1,count++);
	}

}
































