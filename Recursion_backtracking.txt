Backtracking

all possible path in maze...

static List<String> allPaths(String p, boolean[][] maze, int r, int c){
        List<String> pathList = new ArrayList();
        if(r == maze.length -1 && c == maze[0].length -1){
            pathList.add(p);
            return pathList;
        }

        if(maze[r][c]){
            return pathList;
        }

        maze[r][c] = true;

        if(r < maze.length -1){
            pathList.addAll(allPaths(p + 'R' , maze, r+1,c));
        }

        if(c < maze[0].length -1){
            pathList.addAll(allPaths(p + 'D', maze, r, c+1));
        }

        if(r > 0){
            pathList.addAll(allPaths(p + 'L', maze, r-1,c));
        }

        if(c > 0){
            pathList.addAll(allPaths(p + 'U', maze, r, c-1));
        }

        maze[r][c] = false;

        return pathList;

    }
	
N Queens Problem

static int placeQueens(boolean[][] board, int r){
        int count = 0;
        if(r == board.length){
            display(board);
            return 1;
        }

        for(int c = 0 ; c < board.length; c++){
            if(isSafe(board,r,c)){
                board[r][c] = true;
                count += placeQueens(board,r+1);
                board[r][c] = false;
            }
        }
        return count;
    }

    private static void display(boolean[][] board) {

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if(board[i][j] ) {
                    System.out.print(" Q ");
                }else{
                    System.out.print(" x ");
                }
            }
            System.out.println();
        }
        System.out.println();
    }

    /**
     * 	    0 1 2 3
     * 0	* * * *
     * 1	* * * *
     * 2	* + * *
     * 3	* * * *
     *
     * 2,1 -> 1,2 0,3
     * @param board
     * @param r
     * @param c
     * @return
     */
    static boolean isSafe(boolean[][]board,int r,int c){

        //check vertical
        for(int i = 0; i < r ; i++){
            if(board[i][c]){
                return false;
            }
        }

        //check diagonal left
        int maxleft = Math.min(r,c);

        for(int i = 1; i <= maxleft ; i++){
            if(board[r-i][c-i]){
                return false;
            }
        }

        //check diagonal right
        int maxRight = Math.min(r, board.length-c-1);
        for(int i = 1 ; i <= maxRight; i++){
            if(board[r-i][c+i]){
                return false;
            }
        }
        return true;
    }
	
	
N-Knights problem 
static void knights(boolean[][] board,int r,int c,int k){
        if(k == 0){
            display(board);
            return;
        }

        if(r == board.length -1 && c == board.length ){
            return;
        }

        if(c == board.length ){
            knights( board, r+1, 0, k);
            return;
        }

        if(isSafe(board,r,c)){
            board[r][c] = true;
            knights(board, r, c+1, k-1);
            board[r][c] = false;
        }

        knights(board, r, c+1, k);
    }

    static boolean isSafe(boolean[][] board, int r, int c){

        if(isValid(board, r-2, c-1)){
            if(board[r-2][c-1]){
                return false;
            }
        }

        if(isValid(board, r-2, c+1)){
            if(board[r-2][c+1]){
                return false;
            }
        }

        if(isValid(board, r-1, c-2)){
            if(board[r-1][c-2]){
                return false;
            }
        }

        if(isValid(board,r-1,c+2)){
            if(board[r-1][c+2]){
                return false;
            }
        }


        return isValid(board, r, c);
    }

    private static boolean isValid(boolean[][] board, int r, int c){

        if(r < board.length && c < board.length && r >= 0 && c >= 0){
            return true;
        }
        return false;
    }

    private static void display(boolean[][] board) {

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if(board[i][j] ) {
                    System.out.print(" K ");
                }else{
                    System.out.print(" - ");
                }
            }
            System.out.println();
        }
        System.out.println();
    }
	
Sudoku

public static void main(String[] args) {
        int[][] board = new int[][]{
                {3, 0, 6, 5, 0, 8, 4, 0, 0},
                {5, 2, 0, 0, 0, 0, 0, 0, 0},
                {0, 8, 7, 0, 0, 0, 0, 3, 1},
                {0, 0, 3, 0, 1, 0, 0, 8, 0},
                {9, 0, 0, 8, 6, 3, 0, 0, 5},
                {0, 5, 0, 0, 9, 0, 6, 0, 0},
                {1, 3, 0, 0, 0, 0, 2, 5, 0},
                {0, 0, 0, 0, 0, 0, 0, 7, 4},
                {0, 0, 5, 2, 0, 6, 3, 0, 0}
        };

        if(sudoku(board)){
            display(board);
        }else{
            System.out.println("No Answer");
        }
    }

    static boolean sudoku(int[][] board){
        int row = -1;
        int col = -1;
        boolean hasEmpty = false;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if(board[i][j] == 0){
                    row = i;
                    col = j;
                    hasEmpty = true;
                    break;
                }
            }
            if(hasEmpty){
                break;
            }
        }
        if(!hasEmpty){
            return true;
        }

        for(int num = 1; num <= 9 ; num++){
            if(isSafe(board,row,col,num)){
                board[row][col] = num;
                if(sudoku(board)){
                    return true;
                }else{
                    board[row][col] = 0;
                }
            }
        }

        return false;

    }

    private static boolean isSafe(int[][] board, int row, int col, int num) {

        for (int i = 0; i < board.length; i++) {
            if(board[row][i] == num){
                return false;
            }
        }

        for (int i = 0; i < board.length; i++) {
            if(board[i][col] == num){
                return false;
            }
        }

        int sqrt = (int) Math.sqrt(board.length);
        int rowStart = row - row%sqrt;
        int colStart = col -col%sqrt;

        for (int i = rowStart; i < rowStart + sqrt; i++) {
            for (int j = colStart ; j < colStart + sqrt; j++) {
                if(board[i][j] == num){
                    return false;
                }
            }

        }

        return true;
    }

    private static void display(int[][] board) {

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }
















	
